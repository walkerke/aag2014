dat.melt$gencode <- ifelse(dat.melt$gender == 'male', 1, 2)
View(dat.melt)
class(dat.melt$gencode)
d1 <- dPlot(
x = "population",
y = "age",
groups = "gender",
data = dat.melt,
type = 'bar')
d1$yAxis(type = "addCategoryAxis", orderRule = "ord")
d1$xAxis(type = "addMeasureAxis"
#         , outputFormat = "#! function(d) {
#                         return d3.format(Math.abs(d));
#                         } !#"
)
# t <- colorRampPalette(brewer.pal(4, "BuPu"))
#
d1$colorAxis(
type = "addColorAxis",
colorSeries = "gencode",
palette = brewer.pal(n=5, "PuOr")
)
d1
d1$colorAxis(
type = "addColorAxis",
colorSeries = "gencode",
palette = brewer.pal(n=5, "BuPu")
)
d1
d1$colorAxis(
type = "addColorAxis",
colorSeries = "gencode",
palette = brewer.pal(n=5, "PRGn")
)
d1
d1$colorAxis(
type = "addColorAxis",
colorSeries = "gencode",
palette = c("yellow", "green")
)
d1
source('~/Datavis/dimple_pyramids.R')
source('~/Datavis/dimple_pyramids.R')
y <- dPyramids("UK", 2010, c("red", "blue"))
y <- dPyramid("UK", 2010, c("red", "blue"))
source('~/Datavis/dimple_pyramids.R')
y <- dPyramid("UK", 2010, c("red", "blue"))
y
y <- dPyramid("UK", 2010)
y
y <- dPyramid("UK", c(2010, 2015, 2020))
y
x <- rnorm(100, mean=0, sd=1)
y <- runif(100, -2, 2)
df <- data.frame(x, y)
library(rcharts)
library(rCharts)
n1 <- nPlot(y~x, data = df, type = "scatterPlot")
n1
n1 <- nPlot(y~x, data = df, type = "scatterChart")
n1
d1 <- dPlot(y~x, data = df, type = "bubble")
d1
d1$xAxis(type = "addMeasureAxis")
d1$yAxis(type = "addMeasureAxis")
d1
d1 <- dPlot(x = "x", y = "y", data = df, type = "bubble")
d1$yAxis(type = "addMeasureAxis")
d1$xAxis(type = "addMeasureAxis")
d1
d1 <- dPlot(x = "x", y = "y", data = df, type = "bubble")
d1$yAxis(type = "addMeasureAxis")
d1
d1$xAxis(type = "addMeasureAxis")
d1
plot(df$x, df$y)
z <- rnorm(100, 0, 1)
d1 <- dPlot(x = "x", y = "z", data = df, type = "bubble")
d1$xAxis(type = "addMeasureAxis")
d1$yAxis(type = "addMeasureAxis")
d1
library(rCharts)
Gamestatistics=read.csv("https://raw.github.com/patilv/dimplemusical/master/Gamestatisticscleaned.csv")
d4=dPlot(x= "Points.Per.Game", y="Assists.Per.Game",data = Gamestatistics,groups = c("Player"),
type = "bubble")
d4$yAxis(type="addMeasureAxis")
d4$xAxis(type="addMeasureAxis")
d4
library(rCharts)
s1 <- rnorm(100, 0, 1)
s2 <- rnorm(100, 0, 1)
group <- seq(1, 100, 4)
group <- rep(1:4, 25)
df <- data.frame(s1, s2, group)
d1 <- dPlot(s1~s2, group = "group", data=df, type="bubble")
d1$xAxis(type = "addMeasureAxis")
d1$yAxis(type = "addMeasureAxis")
d1
d1 <- nPlot(s1~s2, group = "group", data=df, type="scatterChart")
d1
source('~/Datavis/dimple_pyramids.R')
source('~/Datavis/dimple_pyramids.R')
dPyramid("US", seq(2005, 2045, 10), colors=c("red", "blue"))
source('~/Datavis/dimple_pyramids.R')
dPyramid("IN", seq(2004, 2044, 10), colors=c("orange", "green"))
source('~/Datavis/dimple_pyramids.R')
dPyramid("IN", seq(2004, 2044, 10), colors=c("orange", "green"))
?rev
library(maptools)
library(ggmap)
library(RColorBrewer)
zips <- readShapePoly('C:/Users/kylewalker/Dropbox/Health project/Data/shape/Texas_2007_ZCTAs.shp')
choro <- rev(brewer.pal('RdBu', 5))
basemap <- get_map(
location = c(lon = -99.547, lat = 31.293),
zoom = 8,
color = "color",
source = "osm")
choro <- rev(brewer.pal(5, 'RdBu'))
basemap
ggmap(basemap)
basemap <- get_map(
location = c(lon = -99.547, lat = 31.293),
zoom = 7,
color = "color",
source = "osm")
ggmap(basemap)
basemap <- get_map(
location = c(lon = -99.547, lat = 31.293),
zoom = 6,
color = "color",
source = "osm")
ggmap(basemap)
basemap <- get_map(
location = c(lon = -99.547, lat = 31.293),
zoom = 6,
color = "color",
source = "osm")
basemap <- get_map(
location = c(lon = -99.547, lat = 31.293),
zoom = 6,
color = "color",
source = "osm")
ggmap(basemap)
plot(zips)
h1 <- hPlot(
rate ~ year,
data = hiv,
group = "country",
type = "line")
source('~/Teaching/World Regional/Data/hiv/hiv.R')
h1
h1$save('C:/Users/kylewalker/Dropbox/Teaching with datavis/hiv.html', cdn = TRUE)
source('~/Teaching/World Regional/Data/hiv/hiv.R')
h1
source('~/Teaching/World Regional/Data/hiv/hiv.R')
h1
source('~/Teaching/World Regional/Data/hiv/hiv.R')
h1
source('~/Datavis/dimple_pyramids.R')
dPyramid("IN", seq(2004, 2044, 10), colors=c("orange", "green"))
dPyramid("IN", 2014)
source("https://raw.github.com/walkerke/teaching-with-datavis/master/tfr-in-europe.R")
tfrPlot
dPyramid("IN", seq(2004, 2044, 10), colors=c("orange", "green"))
d1 <- dPyramid("IN", seq(2004, 2044, 10), colors=c("orange", "green"))
library(dplyr)
library(foreign)
dat <- read.dta("C:/Users/kylewalker/Documents/Research/Migration/Boomer migration/derived/boomer_merged.dta")
metros <- group_by(dat, metroid)
diff <- summarise(metros,
diff = sum(boomerdiff))
diff <- diff[order(-diff$diff),]
corr <- summarise(metros,
cdiff = cor(distance, boomerdiff),
clq = cor(distance, lqdiff),
cgro = cor(distance, boomergro)
)
View(corr)
corr <- summarise(metros,
cdiff = cor(distance, boomerdiff, use="pairwise.complete.obs"),
clq = cor(distance, lqdiff, use="pairwise.complete.obs"),
cgro = cor(distance, boomergro, use="pairwise.complete.obs")
)
View(corr)
library(dplyr)
library(foreign)
dat <- read.dta("C:/Users/kylewalker/Documents/Research/Migration/Boomer migration/derived/boomer_merged.dta")
# metros <- group_by(dat, metroid)
#
# diff <- summarise(metros,
#                   diff = sum(boomerdiff))
#
# diff <- diff[order(-diff$diff),]
#
# corr <- summarise(metros,
#                   cdiff = cor(distance, boomerdiff, use="pairwise.complete.obs"),
#                   clq = cor(distance, lqdiff, use="pairwise.complete.obs"),
#                   cgro = cor(distance, boomergro, use="pairwise.complete.obs")
#                   )
## Better dplyr analysis
summary <- dat %.%
group_by(metroid) %.%
summarise(
diff = sum(boomerdiff),
cdiff = cor(distance, boomerdiff, use="pairwise.complete.obs"),
clq = cor(distance, lqdiff, use="pairwise.complete.obs"),
cgro = cor(distance, boomergro, use="pairwise.complete.obs")) %.%
arrange(clq)
library(dplyr)
library(foreign)
dat <- read.dta("C:/Users/kylewalker/Documents/Research/Migration/Boomer migration/derived/boomer_merged.dta")
# metros <- group_by(dat, metroid)
#
# diff <- summarise(metros,
#                   diff = sum(boomerdiff))
#
# diff <- diff[order(-diff$diff),]
#
# corr <- summarise(metros,
#                   cdiff = cor(distance, boomerdiff, use="pairwise.complete.obs"),
#                   clq = cor(distance, lqdiff, use="pairwise.complete.obs"),
#                   cgro = cor(distance, boomergro, use="pairwise.complete.obs")
#                   )
## Better dplyr analysis
summary <- dat %.%
group_by(metroid) %.%
summarise(
diff = sum(boomerdiff),
cdiff = cor(distance, boomerdiff, use="pairwise.complete.obs"),
clq = cor(distance, lqdiff, use="pairwise.complete.obs"),
cgro = cor(distance, boomergro, use="pairwise.complete.obs")) %.%
arrange(clq)
View(summary)
## Script to produce ggplot2 plots for AAG 2014 ##
library(foreign)
library(ggplot2)
library(plotly)
dat.tsp <- dat[dat$metroid == 45300,]
sub.tsp <- dat.tsp[dat.tsp$boomergro < 200, ]
tsp.gro <- ggplot(sub.tsp, aes(distmiles, boomergro))
tsp.gro + geom_point() + stat_smooth()
library(dplyr)
library(dplyr)
library(foreign)
dat <- read.dta("C:/Users/kylewalker/Documents/Research/Migration/Boomer migration/derived/boomer_merged.dta")
# metros <- group_by(dat, metroid)
#
# diff <- summarise(metros,
#                   diff = sum(boomerdiff))
#
# diff <- diff[order(-diff$diff),]
#
# corr <- summarise(metros,
#                   cdiff = cor(distance, boomerdiff, use="pairwise.complete.obs"),
#                   clq = cor(distance, lqdiff, use="pairwise.complete.obs"),
#                   cgro = cor(distance, boomergro, use="pairwise.complete.obs")
#                   )
## Better dplyr analysis
summary <- dat %.%
filter(boomergro < 200) %.%
group_by(metroid) %.%
summarise(
diff = sum(boomerdiff),
cdiff = cor(distance, boomerdiff, use="pairwise.complete.obs"),
clq = cor(distance, lqdiff, use="pairwise.complete.obs"),
cgro = cor(distance, boomergro, use="pairwise.complete.obs")) %.%
arrange(clq)
View(summary)
## Script to produce ggplot2 plots for AAG 2014 ##
library(foreign)
library(ggplot2)
#library(plotly)
dat.tsp <- dat[dat$metroid == 45300,]
tsp.gro <- ggplot(dat.tsp, aes(distmiles, boomergro))
tsp.gro + geom_point() + stat_smooth()
sub.tsp <- dat.tsp[dat.tsp$boomergro < 200, ]
tsp.diff <- ggplot(sub.tsp, aes(distmiles, boomerdiff))
tsp.diff + geom_point() + stat_smooth() + theme_bw()
?apply
?sapply
library(ggplot2)
library(plotly)
library(countrycode)
library(WDI)
api_key <- "igj7twgt9q"
countries <- c("India", "Pakistan", "Nepal", "Bhutan", "Bangladesh", "Sri Lanka")
codes <- c()
sapply(countries, function(x) c(codes, countrycode(x, "country.name", "iso2c")))
codes <- sapply(countries, function(x) c(codes, countrycode(x, "country.name", "iso2c")))
library(ggplot2)
library(plotly)
library(countrycode)
library(WDI)
api_key <- "igj7twgt9q"
countries <- c("India", "Pakistan", "Nepal", "Bhutan", "Bangladesh", "Sri Lanka")
codes <- c()
codes <- sapply(countries, function(x) c(codes, countrycode(x, "country.name", "iso2c")) return(codes))
library(ggplot2)
library(plotly)
library(countrycode)
library(WDI)
api_key <- "igj7twgt9q"
countries <- c("India", "Pakistan", "Nepal", "Bhutan", "Bangladesh", "Sri Lanka")
codes <- c()
codes <- sapply(countries, function(x) c(codes, countrycode(x, "country.name", "iso2c")))
codes <- sapply(countries, function(x) c(countrycode(x, "country.name", "iso2c")))
sapply(countries, function(x) c(countrycode(x, "country.name", "iso2c")))
codes
codes[2]
codes[2,]
codes[2,1]
library(ggplot2)
library(plotly)
library(countrycode)
library(WDI)
api_key <- "igj7twgt9q"
countries <- c("India", "Pakistan", "Nepal", "Bhutan", "Bangladesh", "Sri Lanka")
codes <- c()
# sapply(countries, function(x) c(countrycode(x, "country.name", "iso2c")))
for (c in countries) {
code <- countrycode(c, "country.name", "iso2c")
codes <- c(codes, code)
}
source('~/Research/Migration/Boomer migration/aag2014/migrants.R')
educplot <- ggplot(boomereduc, aes(x = year, y = avgdist, color = education)) +
geom_line(size = 1, aes(group = factor)) +
geom_point(size = 4) +
theme_bw() +
geom_hline(yintercept = 0, color = "black", linetype = "dashed") +
labs(list(x = "ACS Year", y = "Average std. distance from city core", color = "")) +
theme(legend.position="bottom",
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
legend.text = element_text(size = 14))
educplot
View(boomereduc)
educplot <- ggplot(boomereduc, aes(x = year, y = avgdist, color = education)) +
geom_line(size = 1, aes(group = education)) +
geom_point(size = 4) +
theme_bw() +
geom_hline(yintercept = 0, color = "black", linetype = "dashed") +
labs(list(x = "ACS Year", y = "Average std. distance from city core", color = "")) +
theme(legend.position="bottom",
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
legend.text = element_text(size = 14))
educplot
genplot
library(foreign)
library(ggplot2)
library(dplyr)
library(scales)
orig <- read.dta('C:/Users/kylewalker/Documents/Research/Migration/July 2013/derived/cleaned.dta')
st1 <- orig %.%
select(yob, zdistance, inccat, perwt, metroid) %.%
group_by(metroid) %.%
mutate(
gens = ifelse(yob > 1981, "millenials",
ifelse(yob > 1964 & yob < 1982, "genx",
ifelse(yob > 1945 & yob < 1965, "boomers",
ifelse(yob < 1946, "greatest", "other")))),
distcat = ifelse(zdistance == min(zdistance), "Nearest PUMA",
ifelse(zdistance < -1, "Nearer than -1",
ifelse(zdistance >= -1 & zdistance <= 1, "-1 to +1",
ifelse(zdistance > 1, "Farther than +1", NA))))) %.%
filter(gens == "boomers") %.%
group_by(distcat, inccat, add = F) %.%
summarise(
totnum = sum(perwt))
incpercent1 <- incdist1 %.%
group_by(distcat) %.%
mutate(percent = (totnum / sum(totnum)))
incpercent1$factor <- factor(incpercent1$distcat,
levels = c("Nearest PUMA",
"Nearer than -1",
"-1 to +1",
"Farther than +1"))
incbar1 <- ggplot(incpercent1, aes(x = factor, y = percent, fill = inccat)) +
geom_bar(position = "dodge", stat = "identity",) +
theme_bw() +
scale_fill_brewer(palette = "Set1") +
labs(list(x = "Distance category (in std. deviation units)",
y = "Percent of population in distance category",
fill = "")) +
theme(legend.position = "bottom",
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
legend.text = element_text(size = 14)) +
scale_y_continuous(labels = percent)
ggsave(file = "assets/img/incbar.png", plot = incbar1, width = 11.5, height = 8)
incdist1 <- orig %.%
select(yob, zdistance, inccat, perwt, metroid) %.%
group_by(metroid) %.%
mutate(
gens = ifelse(yob > 1981, "millenials",
ifelse(yob > 1964 & yob < 1982, "genx",
ifelse(yob > 1945 & yob < 1965, "boomers",
ifelse(yob < 1946, "greatest", "other")))),
distcat = ifelse(zdistance == min(zdistance), "Nearest PUMA",
ifelse(zdistance < -1, "Nearer than -1",
ifelse(zdistance >= -1 & zdistance <= 1, "-1 to +1",
ifelse(zdistance > 1, "Farther than +1", NA))))) %.%
filter(gens == "boomers") %.%
group_by(distcat, inccat, add = F) %.%
summarise(
totnum = sum(perwt))
incpercent1 <- incdist1 %.%
group_by(distcat) %.%
mutate(percent = (totnum / sum(totnum)))
incpercent1$factor <- factor(incpercent1$distcat,
levels = c("Nearest PUMA",
"Nearer than -1",
"-1 to +1",
"Farther than +1"))
incbar1 <- ggplot(incpercent1, aes(x = factor, y = percent, fill = inccat)) +
geom_bar(position = "dodge", stat = "identity",) +
theme_bw() +
scale_fill_brewer(palette = "Set1") +
labs(list(x = "Distance category (in std. deviation units)",
y = "Percent of population in distance category",
fill = "")) +
theme(legend.position = "bottom",
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
legend.text = element_text(size = 14)) +
scale_y_continuous(labels = percent)
ggsave(file = "assets/img/incbar.png", plot = incbar1, width = 11.5, height = 8)
setwd("~/Research/Migration/Boomer migration/aag2014")
incdist1 <- orig %.%
select(yob, zdistance, inccat, perwt, metroid) %.%
group_by(metroid) %.%
mutate(
gens = ifelse(yob > 1981, "millenials",
ifelse(yob > 1964 & yob < 1982, "genx",
ifelse(yob > 1945 & yob < 1965, "boomers",
ifelse(yob < 1946, "greatest", "other")))),
distcat = ifelse(zdistance == min(zdistance), "Nearest PUMA",
ifelse(zdistance < -1, "Nearer than -1",
ifelse(zdistance >= -1 & zdistance <= 1, "-1 to +1",
ifelse(zdistance > 1, "Farther than +1", NA))))) %.%
filter(gens == "boomers") %.%
group_by(distcat, inccat, add = F) %.%
summarise(
totnum = sum(perwt))
incpercent1 <- incdist1 %.%
group_by(distcat) %.%
mutate(percent = (totnum / sum(totnum)))
incpercent1$factor <- factor(incpercent1$distcat,
levels = c("Nearest PUMA",
"Nearer than -1",
"-1 to +1",
"Farther than +1"))
incbar1 <- ggplot(incpercent1, aes(x = factor, y = percent, fill = inccat)) +
geom_bar(position = "dodge", stat = "identity",) +
theme_bw() +
scale_fill_brewer(palette = "Set1") +
labs(list(x = "Distance category (in std. deviation units)",
y = "Percent of population in distance category",
fill = "")) +
theme(legend.position = "bottom",
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
legend.text = element_text(size = 14)) +
scale_y_continuous(labels = percent)
ggsave(file = "assets/img/incbar.png", plot = incbar1, width = 11.5, height = 8)
incbar1 <- ggplot(incpercent1, aes(x = factor, y = percent, fill = factor(inccat))) +
geom_bar(position = "dodge", stat = "identity",) +
theme_bw() +
scale_fill_brewer(palette = "Set1") +
labs(list(x = "Distance category (in std. deviation units)",
y = "Percent of population in distance category",
fill = "")) +
theme(legend.position = "bottom",
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
legend.text = element_text(size = 14)) +
scale_y_continuous(labels = percent)
ggsave(file = "assets/img/incbar.png", plot = incbar1, width = 11.5, height = 8)
slidify::slidify('index.Rmd')
slidify::slidify('index.Rmd')
incpercent1$incfactor <- factor(incpercent1$inccat,
levels = c(0, 25000, 50000, 75000, 100000, 150000, 250000),
labels = c('Less than 25k', '25k', '50k', '75k', '100k',
'150k', '250k')
)
incbar1 <- ggplot(incpercent1, aes(x = factor, y = percent, fill = incfactor)) +
geom_bar(position = "dodge", stat = "identity",) +
theme_bw() +
scale_fill_brewer(palette = "Set1") +
labs(list(x = "Distance category (in std. deviation units)",
y = "Percent of population in distance category",
fill = "")) +
theme(legend.position = "bottom",
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
legend.text = element_text(size = 14)) +
scale_y_continuous(labels = percent)
ggsave(file = "assets/img/incbar.png", plot = incbar1, width = 11.5, height = 8)
incbar1 <- ggplot(incpercent1, aes(x = factor, y = percent, fill = incfactor)) +
geom_bar(position = "dodge", stat = "identity",) +
theme_bw() +
scale_fill_brewer(palette = "Set1") +
labs(list(x = "Distance category (in std. deviation units)",
y = "Percent of population in distance category",
fill = "Household income")) +
theme(legend.position = "bottom",
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
legend.text = element_text(size = 14)) +
scale_y_continuous(labels = percent)
ggsave(file = "assets/img/incbar.png", plot = incbar1, width = 11.5, height = 8)
